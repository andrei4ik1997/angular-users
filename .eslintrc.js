// Migrate built-in rules to @stylistic/js namespace
/* eslint @stylistic/migrate/migrate-js: "error" */

// Migrate `@typescript-eslint` rules to @stylistic/ts namespace
/* eslint @stylistic/migrate/migrate-ts: "error" */

module.exports = {
	root: true,
	plugins: [
		'@stylistic/migrate',
		'@stylistic/ts',
		'@stylistic/js',
		'unicorn',
		'sonarjs',
		'promise',
		'simple-import-sort',
		'rxjs-angular',
		'enforce-angular-signal-call',
	],
	overrides: [
		{
			files: ['*.ts'],
			parserOptions: {
				project: '**/tsconfig.json',
				sourceType: 'module',
				tsconfigRootDir: __dirname,
			},
			extends: [
				'eslint:recommended',
				'plugin:@typescript-eslint/recommended',
				'plugin:@typescript-eslint/recommended-requiring-type-checking',
				'plugin:@angular-eslint/recommended',
				'plugin:@angular-eslint/template/process-inline-templates',
				'plugin:deprecation/recommended',
				'plugin:typescript-sort-keys/recommended',
				'plugin:sonarjs/recommended-legacy',
				'prettier',
			],
			rules: {
				'class-methods-use-this': 'off',
				'no-useless-return': 'error',
				'no-sequences': 'error',
				'no-multi-assign': 'error',
				'no-useless-constructor': 'off',
				'no-self-compare': 'error',
				'no-promise-executor-return': 'error',
				'no-constructor-return': 'error',
				'default-case-last': 'error',
				'default-case': 'error',
				'no-template-curly-in-string': 'error',
				'simple-import-sort/imports': 'error',
				'simple-import-sort/exports': 'error',
				'no-restricted-globals': [
					'error',
					{
						name: 'setInterval',
						message: 'Avoid using timers. Use `interval` from rxjs instead.',
					},
					{
						name: 'setTimeout',
						message: 'Avoid using timers. Use `timer` from rxjs instead.',
					},
				],
				'no-restricted-properties': [
					'error',
					{
						object: 'window',
						property: 'setInterval',
						message: 'Avoid using timers. Use `interval` from rxjs instead.',
					},
					{
						object: 'window',
						property: 'setTimeout',
						message: 'Avoid using timers. Use `timer` from rxjs instead.',
					},
				],
				'prefer-template': 'error',
				'vars-on-top': 'error',
				'no-useless-rename': [
					'error',
					{
						ignoreDestructuring: true,
						ignoreImport: false,
						ignoreExport: true,
					},
				],
				'no-invalid-this': 'error',
				'arrow-body-style': ['error', 'always'],
				camelcase: 'off',
				complexity: ['error', { max: 9 }],
				curly: ['error', 'all'],
				'dot-notation': 'off',
				eqeqeq: ['error', 'always'],
				'guard-for-in': 'error',
				'id-match': [
					'error',
					'^[a-zA-Z_0-9$]*$',
					{
						properties: true,
						ignoreDestructuring: false,
						onlyDeclarations: false,
					},
				],
				'max-classes-per-file': ['error', 1],
				'max-depth': ['error', 4],
				'max-lines-per-function': [
					'error',
					{
						max: 110,
						skipBlankLines: true,
						skipComments: true,
						IIFEs: true,
					},
				],
				'max-nested-callbacks': ['error', 3],
				'no-caller': 'error',
				'no-cond-assign': 'error',
				'no-param-reassign': ['error'],
				'no-constant-condition': 'error',
				'no-debugger': 'error',
				'no-empty-functions': 'off',
				'no-eval': 'error',
				'no-fallthrough': 'error',
				'no-unmodified-loop-condition': 'error',
				'no-negated-condition': 'error',
				'no-nested-ternary': 'error',
				'no-new-wrappers': 'error',
				'no-prototype-builtins': 'error',
				'no-redeclare': 'error',
				'no-restricted-exports': ['error'],
				'no-return-assign': ['error', 'always'],
				'no-self-assign': 'error',
				'no-shadow': 'off',
				'no-sparse-arrays': 'error',
				'no-throw-literal': 'error',
				'no-undef-init': 'error',
				'no-unneeded-ternary': 'error',
				'no-unsafe-finally': 'error',
				'no-unused-expressions': 'error',
				'no-unused-labels': 'error',
				'no-var': 'error',
				'object-shorthand': 'error',
				'one-var': [
					'error',
					{
						var: 'never',
						let: 'never',
						const: 'never',
					},
				],
				'prefer-const': 'error',
				'prefer-object-spread': 'error',
				'no-implicit-coercion': 'error',
				'no-loop-func': 'error',
				radix: 'off',
				'require-atomic-updates': 'error',
				'unicode-bom': 'error',
				'use-isnan': 'error',
				'valid-typeof': 'off',
				'prefer-arrow-callback': ['error', { allowNamedFunctions: true }],
				'no-implicit-globals': 'error',
				'no-implied-eval': 'error',
				'no-unused-vars': 'off',
				'func-style': [
					'error',
					'declaration',
					{
						allowArrowFunctions: true,
					},
				],
				'no-bitwise': 'error',
				'no-case-declarations': 'error',
				'no-console': [
					'error',
					{
						allow: ['info', 'assert', 'warn', 'error'],
					},
				],
				'no-empty': ['error', { allowEmptyCatch: true }],
				'no-irregular-whitespace': 'error',
				'no-void': ['error', { allowAsStatement: true }],
				'no-useless-concat': 'error',
				'no-useless-escape': 'error',
				'no-restricted-syntax': [
					'error',
					{
						message: 'Use `map(() => value)` instead of `mapTo(value)`, the operator is deprecated',
						selector: "CallExpression[callee.name='mapTo']",
					},
					{
						message: 'Use `FALSE_HANDLER` please instead of `() => false`',
						selector: "ArrowFunctionExpression[params.length=0][body.raw='false'][body.value='false']",
					},
					{
						message: 'Use `TRUE_HANDLER` please instead of `() => true`',
						selector: "ArrowFunctionExpression[params.length=0][body.raw='true'][body.value='true']",
					},
					{
						message:
							'Use `switchMap(() => stream$)` instead of `switchMapTo(stream$)`, the operator is deprecated',
						selector: "CallExpression[callee.name='switchMapTo']",
					},
					{
						message: 'Use `mergeMap` instead of `flatMap`, the operator is deprecated',
						selector: "CallExpression[callee.name='flatMap']",
					},
					{
						message: "Use `map(x => x?.foo?.bar)` instead of `pluck('foo', 'bar')`",
						selector: "CallExpression[callee.name='pluck']",
					},
					{
						message:
							'Provide initial value to .reduce() method. Possible runtime error: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Reduce_of_empty_array_with_no_initial_value',
						selector:
							"CallExpression[arguments.length=1] > MemberExpression.callee > Identifier.property[name='reduce']",
					},
				],
				'@typescript-eslint/naming-convention': [
					'error',
					{
						format: ['PascalCase'],
						selector: 'typeLike',
					},
					{
						format: ['PascalCase'],
						modifiers: ['exported'],
						selector: 'class',
					},
					{
						format: ['camelCase'],
						modifiers: ['exported'],
						selector: 'function',
					},
					{
						format: ['PascalCase'],
						modifiers: ['exported'],
						selector: 'interface',
					},
					{
						format: null,
						modifiers: ['destructured'],
						selector: 'variable',
					},
					{
						format: ['camelCase'],
						selector: 'variable',
					},
					{
						format: ['UPPER_CASE', 'camelCase'],
						modifiers: ['global'],
						selector: 'variable',
					},
					{
						format: ['UPPER_CASE', 'camelCase'],
						modifiers: ['exported'],
						selector: 'variable',
					},
					{
						format: ['StrictPascalCase'],
						modifiers: ['exported'],
						selector: 'enum',
					},
					{
						format: ['PascalCase'],
						selector: 'enumMember',
					},
					{
						format: ['camelCase'],
						selector: 'classMethod',
					},
					{
						format: ['camelCase'],
						selector: 'classProperty',
					},
				],
				'deprecation/deprecation': 'error',
				'promise/catch-or-return': 'error',
				'promise/param-names': 'error',
				'sonarjs/no-identical-functions': 'error',
				'sonarjs/cognitive-complexity': ['error', 15],
				'sonarjs/elseif-without-else': 'error',
				'sonarjs/no-inverted-boolean-check': 'error',
				'sonarjs/pseudo-random': 'off',
				'unicorn/escape-case': 'error',
				'unicorn/filename-case': [
					'error',
					{
						case: 'kebabCase',
					},
				],
				'unicorn/new-for-builtins': 'error',
				'unicorn/no-array-push-push': 'error',
				'unicorn/no-empty-file': 'error',
				'unicorn/no-unsafe-regex': 'error',
				'unicorn/no-useless-spread': 'error',
				'unicorn/prefer-logical-operator-over-ternary': 'error',
				'unicorn/prefer-string-replace-all': 'off',
				'unicorn/prefer-string-slice': 'error',
				'unicorn/require-number-to-fixed-digits-argument': 'error',
				'@angular-eslint/contextual-lifecycle': 'error',
				'@angular-eslint/no-async-lifecycle-method': 'error',
				'@angular-eslint/sort-lifecycle-methods': 'error',
				'@angular-eslint/component-class-suffix': 'error',
				'@angular-eslint/directive-class-suffix': 'error',
				'@angular-eslint/component-max-inline-declarations': 'error',
				'@angular-eslint/no-conflicting-lifecycle': 'error',
				'@angular-eslint/no-duplicates-in-metadata-arrays': 'error',
				'@angular-eslint/no-empty-lifecycle-method': 'error',
				'@angular-eslint/no-host-metadata-property': 'error',
				'@angular-eslint/no-input-rename': 'warn',
				'@angular-eslint/no-inputs-metadata-property': 'error',
				'@angular-eslint/no-lifecycle-call': 'error',
				'@angular-eslint/no-output-native': 'error',
				'@angular-eslint/no-output-on-prefix': 'error',
				'@angular-eslint/no-output-rename': 'error',
				'@angular-eslint/no-outputs-metadata-property': 'error',
				'@angular-eslint/no-pipe-impure': 'warn',
				'@angular-eslint/no-queries-metadata-property': 'error',
				'@angular-eslint/prefer-on-push-component-change-detection': 'error',
				'@angular-eslint/prefer-output-readonly': 'error',
				'@angular-eslint/prefer-standalone': 'error',
				'@angular-eslint/relative-url-prefix': 'error',
				'@angular-eslint/use-component-selector': 'error',
				'@angular-eslint/component-selector': [
					'error',
					{
						type: 'element',
						prefix: '',
						style: 'kebab-case',
					},
				],
				'@angular-eslint/directive-selector': [
					'error',
					{
						type: 'attribute',
						style: 'camelCase',
					},
				],
				'@angular-eslint/consistent-component-styles': ['error', 'string'],
				'@angular-eslint/use-component-view-encapsulation': 'warn',
				'@angular-eslint/use-lifecycle-interface': 'error',
				'@angular-eslint/use-pipe-transform-interface': 'error',
				'@angular-eslint/use-injectable-provided-in': 'off',
				'@angular-eslint/contextual-decorator': 'error',
				'@stylistic/js/array-bracket-newline': 'off',
				'@stylistic/js/array-bracket-spacing': 'off',
				'@stylistic/js/array-element-newline': 'off',
				'@stylistic/js/arrow-spacing': 'off',
				'@stylistic/js/block-spacing': 'off',
				'@stylistic/js/brace-style': 'off',
				'@stylistic/js/comma-dangle': 'off',
				'@stylistic/js/comma-style': 'off',
				'@stylistic/js/computed-property-spacing': 'off',
				'@stylistic/js/dot-location': 'off',
				'@stylistic/js/function-call-argument-newline': 'off',
				'@stylistic/js/function-call-spacing': 'off',
				'@stylistic/js/function-paren-newline': 'off',
				'@stylistic/js/generator-star-spacing': 'off',
				'@stylistic/js/implicit-arrow-linebreak': 'off',
				'@stylistic/js/indent': 'off',
				'@stylistic/js/jsx-quotes': 'off',
				'@stylistic/js/key-spacing': 'off',
				'@stylistic/js/keyword-spacing': 'off',
				'@stylistic/js/line-comment-position': 'off',
				'@stylistic/js/linebreak-style': 'off',
				'@stylistic/js/max-statements-per-line': 'off',
				'@stylistic/js/multiline-comment-style': 'off',
				'@stylistic/js/multiline-ternary': 'off',
				'@stylistic/js/newline-per-chained-call': 'off',
				'@stylistic/js/no-confusing-arrow': 'off',
				'@stylistic/js/no-extra-parens': 'off',
				'@stylistic/js/no-extra-semi': 'off',
				'@stylistic/js/no-floating-decimal': 'off',
				'@stylistic/js/no-mixed-operators': 'off',
				'@stylistic/js/no-mixed-spaces-and-tabs': 'off',
				'@stylistic/js/no-multi-spaces': 'off',
				'@stylistic/js/semi': 'off',
				'@stylistic/js/semi-spacing': 'off',
				'@stylistic/js/semi-style': 'off',
				'@stylistic/js/space-in-parens': 'off',
				'@stylistic/js/space-unary-ops': 'off',
				'@stylistic/js/switch-colon-spacing': 'off',
				'@stylistic/js/template-curly-spacing': 'off',
				'@stylistic/js/template-tag-spacing': 'off',
				'@stylistic/js/wrap-iife': 'off',
				'@stylistic/js/wrap-regex': 'off',
				'@stylistic/js/yield-star-spacing': 'off',
				'@stylistic/js/no-tabs': 'off',
				'@stylistic/js/no-whitespace-before-property': 'off',
				'@stylistic/js/nonblock-statement-body-position': 'off',
				'@stylistic/js/object-curly-newline': 'off',
				'@stylistic/js/object-property-newline': 'off',
				'@stylistic/js/one-var-declaration-per-line': 'off',
				'@stylistic/js/operator-linebreak': 'off',
				'@stylistic/js/padded-blocks': 'off',
				'@stylistic/js/arrow-parens': ['error', 'always'],
				'@stylistic/js/comma-spacing': ['error', { before: false, after: true }],
				'@stylistic/js/eol-last': 'error',
				'@stylistic/js/func-call-spacing': 'error',
				'@stylistic/js/lines-around-comment': [
					'error',
					{
						afterBlockComment: false,
						afterLineComment: false,
						allowArrayEnd: true,
						allowArrayStart: true,
						allowBlockEnd: true,
						allowBlockStart: true,
						allowClassEnd: true,
						allowClassStart: true,
						allowObjectEnd: true,
						allowObjectStart: true,
						applyDefaultIgnorePatterns: true,
						beforeBlockComment: false,
						beforeLineComment: false,
					},
				],
				'@stylistic/js/spaced-comment': ['error', 'always', { exceptions: ['*'] }],
				'@stylistic/js/space-infix-ops': 'error',
				'@stylistic/js/space-before-function-paren': [
					'error',
					{
						named: 'never',
						anonymous: 'ignore',
						asyncArrow: 'always',
					},
				],
				'@stylistic/js/space-before-blocks': 'error',
				'@stylistic/js/rest-spread-spacing': 'error',
				'@stylistic/js/quotes': 'off',
				'@stylistic/js/lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
				'@stylistic/js/max-len': [
					'error',
					{
						code: 120,
						ignoreTemplateLiterals: true,
						ignoreRegExpLiterals: true,
						ignoreStrings: true,
						ignoreComments: true,
					},
				],
				'@stylistic/js/new-parens': 'error',
				'@stylistic/js/no-multiple-empty-lines': 'error',
				'@stylistic/js/no-trailing-spaces': 'error',
				'@stylistic/js/object-curly-spacing': ['error', 'always'],
				'@stylistic/js/padding-line-between-statements': [
					'error',
					{ blankLine: 'always', next: 'block', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'block' },
					{ blankLine: 'always', next: 'block-like', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'block-like' },
					{ blankLine: 'always', next: 'return', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'directive' },
					{ blankLine: 'always', next: '*', prev: ['const', 'let', 'var'] },
					{ blankLine: 'always', next: 'class', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'class' },
					{
						blankLine: 'any',
						next: ['const', 'let', 'var', 'export'],
						prev: ['const', 'let', 'var', 'export'],
					},
					{ blankLine: 'any', next: ['case', 'default'], prev: '*' },
					{ blankLine: 'any', next: '*', prev: ['case', 'default'] },
					{ blankLine: 'any', next: 'directive', prev: 'directive' },
				],
				'@stylistic/js/quote-props': ['error', 'as-needed'],
				'no-invalid-this': 'off',
				'@typescript-eslint/no-invalid-this': 'error',
				'@typescript-eslint/method-signature-style': ['error', 'method'],
				'class-methods-use-this': 'off',
				'@typescript-eslint/class-methods-use-this': 'off',
				'@typescript-eslint/strict-boolean-expressions': [
					'error',
					{
						allowString: false,
						allowNumber: false,
						allowNullableObject: false,
						allowNullableBoolean: false,
						allowNullableString: false,
						allowNullableNumber: false,
						allowNullableEnum: false,
						allowAny: false,
						allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
					},
				],
				'@typescript-eslint/typedef': [
					'error',
					{
						arrayDestructuring: false,
						arrowParameter: false,
						memberVariableDeclaration: false,
						objectDestructuring: false,
						parameter: true,
						propertyDeclaration: true,
						variableDeclaration: false,
						variableDeclarationIgnoreFunction: false,
					},
				],
				'max-params': 'off',
				'@typescript-eslint/max-params': ['error', { max: 4 }],
				'no-loop-func': 'off',
				'@typescript-eslint/no-loop-func': 'error',
				'no-magic-numbers': 'off',
				'@typescript-eslint/no-magic-numbers': [
					'error',
					{
						ignore: [-1, 0, 1],
						detectObjects: true,
						ignoreClassFieldInitialValues: true,
						ignoreEnums: true,
					},
				],
				'default-param-last': 'off',
				'@typescript-eslint/default-param-last': 'error',
				'@typescript-eslint/no-useless-empty-export': 'error',
				'@typescript-eslint/no-restricted-imports': [
					'error',
					{
						patterns: [
							{
								group: ['rxjs/operators'],
								message: "Don't use 'rxjs/operators' instead of 'rxjs'",
							},
						],
					},
				],
				'init-declarations': 'off',
				'@typescript-eslint/init-declarations': 'error',
				'no-dupe-class-members': 'off',
				'@typescript-eslint/no-dupe-class-members': 'error',
				'@typescript-eslint/array-type': ['error', { default: 'array-simple', readonly: 'array-simple' }],
				'@typescript-eslint/prefer-enum-initializers': 'error',
				'@typescript-eslint/await-thenable': 'error',
				'@typescript-eslint/ban-ts-comment': 'error',
				'@typescript-eslint/consistent-generic-constructors': 'error',
				'@typescript-eslint/consistent-indexed-object-style': 'error',
				'@typescript-eslint/consistent-type-assertions': [
					'error',
					{
						assertionStyle: 'as',
						objectLiteralTypeAssertions: 'allow-as-parameter',
					},
				],
				'@typescript-eslint/consistent-type-definitions': ['error', 'type'],
				'@typescript-eslint/consistent-type-imports': [
					'error',
					{
						disallowTypeAnnotations: false,
						fixStyle: 'separate-type-imports',
						prefer: 'type-imports',
					},
				],
				'@typescript-eslint/dot-notation': [
					'error',
					{
						allowIndexSignaturePropertyAccess: true,
						allowPrivateClassPropertyAccess: true,
						allowProtectedClassPropertyAccess: true,
					},
				],
				'@typescript-eslint/explicit-function-return-type': [
					'error',
					{
						allowConciseArrowFunctionExpressionsStartingWithVoid: true,
						allowDirectConstAssertionInArrowFunctions: true,
						allowExpressions: true,
						allowHigherOrderFunctions: true,
						allowTypedFunctionExpressions: true,
					},
				],
				'@typescript-eslint/explicit-member-accessibility': [
					'error',
					{
						accessibility: 'explicit',
						overrides: {
							accessors: 'explicit',
							constructors: 'no-public',
							methods: 'explicit',
							parameterProperties: 'explicit',
							properties: 'explicit',
						},
					},
				],
				'@typescript-eslint/no-confusing-non-null-assertion': 'error',
				'@typescript-eslint/no-duplicate-enum-values': 'error',
				'@typescript-eslint/no-duplicate-type-constituents': 'error',
				'@typescript-eslint/no-empty-function': [
					'error',
					{
						allow: [
							'constructors',
							'methods',
							'arrowFunctions',
							'private-constructors',
							'protected-constructors',
							'overrideMethods',
							'decoratedFunctions',
						],
					},
				],
				'@typescript-eslint/no-extra-non-null-assertion': 'error',
				'@typescript-eslint/no-extraneous-class': [
					'error',
					{
						allowConstructorOnly: true,
						allowEmpty: false,
						allowStaticOnly: true,
						allowWithDecorator: true,
					},
				],
				'@typescript-eslint/no-floating-promises': ['error', { ignoreIIFE: true, ignoreVoid: true }],
				'@typescript-eslint/no-for-in-array': 'error',
				'@typescript-eslint/no-implied-eval': 'error',
				'@typescript-eslint/no-inferrable-types': [
					'error',
					{
						ignoreParameters: true,
						ignoreProperties: false,
					},
				],
				'@typescript-eslint/no-namespace': ['error', { allowDeclarations: true }],
				'@typescript-eslint/no-non-null-asserted-optional-chain': 'error',
				'@typescript-eslint/no-shadow': 'error',
				'@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
				'@typescript-eslint/no-unnecessary-qualifier': 'error',
				'@typescript-eslint/no-unnecessary-type-arguments': 'error',
				'@typescript-eslint/no-unnecessary-type-assertion': 'error',
				'@typescript-eslint/no-unnecessary-type-constraint': 'error',
				'@typescript-eslint/no-unsafe-declaration-merging': 'error',
				'no-unused-expressions': 'off',
				'@typescript-eslint/no-unused-expressions': [
					'error',
					{
						allowShortCircuit: true,
						allowTernary: true,
					},
				],
				'@typescript-eslint/no-unused-vars': [
					'error',
					{
						args: 'all',
						argsIgnorePattern: '^_',
						caughtErrors: 'all',
						caughtErrorsIgnorePattern: '^_',
						destructuredArrayIgnorePattern: '^_',
						varsIgnorePattern: '^_',
						ignoreRestSiblings: true,
					},
				],
				'no-use-before-define': 'off',
				'@typescript-eslint/no-use-before-define': [
					'error',
					{
						allowNamedExports: false,
						classes: false,
						enums: true,
						functions: false,
						ignoreTypeReferences: true,
						typedefs: true,
						variables: true,
					},
				],
				'@typescript-eslint/no-useless-constructor': 'error',
				'@typescript-eslint/no-require-imports': 'error',
				'@typescript-eslint/prefer-as-const': 'error',
				'@typescript-eslint/prefer-find': 'error',
				'@typescript-eslint/prefer-for-of': 'error',
				'@typescript-eslint/prefer-includes': 'error',
				'@typescript-eslint/prefer-nullish-coalescing': 'error',
				'@typescript-eslint/prefer-optional-chain': 'error',
				'@typescript-eslint/prefer-readonly': ['error'],
				'@typescript-eslint/prefer-string-starts-ends-with': 'error',
				'@typescript-eslint/promise-function-async': [
					'error',
					{
						allowedPromiseNames: ['Thenable'],
						checkArrowFunctions: true,
						checkFunctionDeclarations: true,
						checkFunctionExpressions: true,
						checkMethodDeclarations: true,
					},
				],
				'@typescript-eslint/require-array-sort-compare': 'error',
				'@typescript-eslint/require-await': 'error',
				'@typescript-eslint/restrict-plus-operands': 'error',
				'@typescript-eslint/sort-type-constituents': 'error',
				'@typescript-eslint/switch-exhaustiveness-check': 'error',
				'@typescript-eslint/restrict-template-expressions': [
					'error',
					{
						allowAny: false,
						allowBoolean: false,
						allowNullish: false,
						allowNumber: true,
						allowRegExp: false,
						allowNever: false,
					},
				],
				'@typescript-eslint/triple-slash-reference': [
					'error',
					{
						lib: 'always',
						path: 'always',
						types: 'always',
					},
				],
				'@typescript-eslint/no-empty-object-type': 'error',
				'@typescript-eslint/no-unsafe-function-type': 'error',
				'@typescript-eslint/no-wrapper-object-types': 'error',
				'@typescript-eslint/member-ordering': [
					'error',
					{
						default: [
							'signature',
							'readonly-signature',
							'public-static-field',
							'protected-static-field',
							'#private-static-field',
							'private-static-field',
							'public-abstract-field',
							'protected-abstract-field',
							'private-decorated-field',
							'private-instance-field',
							'#private-instance-field',
							'public-decorated-field',
							'public-instance-field',
							'protected-decorated-field',
							'protected-instance-field',
							'public-constructor',
							'protected-constructor',
							'private-constructor',
							'public-static-method',
							'protected-static-method',
							'private-static-method',
							'#private-static-method',
							'public-abstract-get',
							'public-abstract-set',
							'protected-abstract-get',
							'protected-abstract-set',
							'public-abstract-method',
							'protected-abstract-method',
							['public-decorated-set', 'public-decorated-get'],
							['public-set', 'public-get'],
							'public-decorated-method',
							'public-instance-method',
							['protected-decorated-set', 'protected-decorated-get'],
							['protected-set', 'protected-get'],
							'protected-decorated-method',
							'protected-instance-method',
							['private-decorated-set', 'private-decorated-get'],
							['private-set', 'private-get'],
							'private-decorated-method',
							'private-instance-method',
							'#private-instance-method',
						],
					},
				],
				'@typescript-eslint/no-unnecessary-type-parameters': 'off',
				'@typescript-eslint/unbound-method': 'off',
				'@stylistic/ts/indent': 'off',
				'@stylistic/ts/block-spacing': 'off',
				'@stylistic/ts/brace-style': 'off',
				'@stylistic/ts/comma-dangle': 'off',
				'@stylistic/ts/no-extra-parens': 'off',
				'@stylistic/ts/key-spacing': 'off',
				'@stylistic/ts/keyword-spacing': 'off',
				'@stylistic/ts/no-extra-semi': 'off',
				'@stylistic/ts/object-curly-newline': 'off',
				'@stylistic/ts/quotes': 'off',
				'@stylistic/ts/semi': 'off',
				'@stylistic/js/object-property-newline': 'off',
				'@stylistic/ts/member-delimiter-style': 'error',
				'@stylistic/ts/type-annotation-spacing': 'error',
				'@stylistic/js/comma-spacing': 'off',
				'@stylistic/ts/comma-spacing': ['error', { before: false, after: true }],
				'@stylistic/js/func-call-spacing': 'off',
				'@stylistic/ts/func-call-spacing': 'error',
				'@stylistic/js/lines-around-comment': 'off',
				'@stylistic/ts/lines-around-comment': [
					'error',
					{
						afterBlockComment: false,
						afterLineComment: false,
						allowArrayEnd: true,
						allowArrayStart: true,
						allowBlockEnd: true,
						allowBlockStart: true,
						allowClassEnd: true,
						allowClassStart: true,
						allowObjectEnd: true,
						allowObjectStart: true,
						applyDefaultIgnorePatterns: true,
						beforeBlockComment: false,
						beforeLineComment: false,
					},
				],
				'@stylistic/js/lines-between-class-members': 'off',
				'@stylistic/ts/lines-between-class-members': [
					'error',
					'always',
					{ exceptAfterOverload: true, exceptAfterSingleLine: true },
				],
				'@stylistic/js/object-curly-spacing': 'off',
				'@stylistic/ts/object-curly-spacing': ['error', 'always'],
				'@stylistic/js/padding-line-between-statements': 'off',
				'@stylistic/ts/padding-line-between-statements': [
					'error',
					{ blankLine: 'always', next: 'block', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'block' },
					{ blankLine: 'always', next: 'block-like', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'block-like' },
					{ blankLine: 'always', next: 'return', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'directive' },
					{ blankLine: 'always', next: ['interface', 'type'], prev: '*' },
					{ blankLine: 'always', next: '*', prev: ['const', 'let', 'var'] },
					{ blankLine: 'always', next: 'class', prev: '*' },
					{ blankLine: 'always', next: '*', prev: 'class' },
					{
						blankLine: 'any',
						next: ['const', 'let', 'var', 'export'],
						prev: ['const', 'let', 'var', 'export'],
					},
					{ blankLine: 'any', next: ['case', 'default'], prev: '*' },
					{ blankLine: 'any', next: '*', prev: ['case', 'default'] },
					{ blankLine: 'any', next: 'directive', prev: 'directive' },
				],
				'@stylistic/js/quote-props': 'off',
				'@stylistic/ts/quote-props': ['error', 'as-needed'],
				'@stylistic/js/space-before-blocks': 'off',
				'@stylistic/ts/space-before-blocks': 'error',
				'@stylistic/js/space-before-function-paren': 'off',
				'@stylistic/ts/space-before-function-paren': [
					'error',
					{
						named: 'never',
						anonymous: 'ignore',
						asyncArrow: 'always',
					},
				],
				'@stylistic/js/space-infix-ops': 'off',
				'@stylistic/ts/space-infix-ops': 'error',
				'enforce-angular-signal-call/enforce-angular-signal-call': 'error',
			},
		},
		{
			files: ['*.html'],
			extends: ['plugin:@angular-eslint/template/recommended'],
			rules: {
				'@angular-eslint/template/no-duplicate-attributes': 'error',
				'@angular-eslint/template/alt-text': 'warn',
				'@angular-eslint/template/banana-in-box': 'error',
				'@angular-eslint/template/button-has-type': 'warn',
				'@angular-eslint/template/click-events-have-key-events': 'off',
				'@angular-eslint/template/conditional-complexity': [
					'error',
					{
						maxComplexity: 9,
					},
				],
				'@angular-eslint/template/cyclomatic-complexity': [
					'error',
					{
						maxComplexity: 9,
					},
				],
				'@angular-eslint/template/elements-content': 'error',
				'@angular-eslint/template/eqeqeq': 'error',
				'@angular-eslint/template/i18n': 'off',
				'@angular-eslint/template/label-has-associated-control': 'error',
				'@angular-eslint/template/mouse-events-have-key-events': 'error',
				'@angular-eslint/template/no-any': 'error',
				'@angular-eslint/template/no-autofocus': 'error',
				'@angular-eslint/template/no-distracting-elements': 'error',
				'@angular-eslint/template/no-inline-styles': 'off',
				'@angular-eslint/template/no-interpolation-in-attributes': 'error',
				'@angular-eslint/template/no-positive-tabindex': 'error',
				'@angular-eslint/template/prefer-ngsrc': 'error',
				'@angular-eslint/template/use-track-by-function': 'error',
				'@angular-eslint/template/no-negated-async': 'error',
				'@angular-eslint/template/prefer-control-flow': 'error',
				'@angular-eslint/template/attributes-order': 'error',
				'@angular-eslint/template/prefer-self-closing-tags': 'error',
				'@angular-eslint/template/no-call-expression': 'off',
			},
		},
		{
			files: ['*.html'],
			excludedFiles: ['*inline-template-*.component.html'],
			extends: ['plugin:prettier/recommended'],
			rules: {
				'prettier/prettier': [
					'error',
					{
						parser: 'angular',
					},
				],
			},
		},
		{
			files: ['*.ts'],
			plugins: ['rxjs'],
			extends: ['plugin:rxjs/recommended'],
			rules: {
				'rxjs/ban-observables': [
					'error',
					{
						of: false,
						onErrorResumeNext: 'What is this? Visual Basic?',
					},
				],
				'rxjs/ban-operators': [
					'error',
					{
						of: false,
						mapTo: 'Use map(() => val)',
					},
				],
				'rxjs/finnish': [
					'error',
					{
						functions: true,
						methods: false,
						names: {
							'^(canActivate|canActivateChild|canDeactivate|canLoad|intercept|resolve|validate)$': false,
						},
						parameters: true,
						properties: true,
						strict: false,
						types: {
							'^EventEmitter$': false,
						},
						variables: true,
					},
				],
				'rxjs/no-async-subscribe': 'error',
				'rxjs/no-compat': 'error',
				'rxjs/no-connectable': 'error',
				'rxjs/no-create': 'error',
				'rxjs/no-cyclic-action': 'error',
				'rxjs/no-explicit-generics': 'error',
				'rxjs/no-exposed-subjects': 'error',
				'rxjs/no-redundant-notify': 'error',
				'rxjs/no-index': 'error',
				'rxjs/no-internal': 'error',
				'rxjs/no-ignored-error': 'off',
				'rxjs/no-ignored-notifier': 'error',
				'rxjs/no-ignored-observable': 'error',
				'rxjs/no-ignored-replay-buffer': 'error',
				'rxjs/no-ignored-subscription': 'off',
				'rxjs/no-nested-subscribe': 'error',
				'rxjs/no-ignored-subscribe': 'error',
				'rxjs/no-subclass': 'error',
				'rxjs/no-subject-unsubscribe': 'error',
				'rxjs/no-subject-value': 'off',
				'rxjs/no-topromise': 'error',
				'rxjs/no-unbound-methods': 'error',
				'rxjs/no-unsafe-catch': 'error',
				'rxjs/no-unsafe-first': 'error',
				'rxjs/no-unsafe-subject-next': 'error',
				'rxjs/no-unsafe-switchmap': 'error',
				'rxjs/prefer-observer': 'off',
				'rxjs/suffix-subjects': [
					'error',
					{
						parameters: true,
						properties: true,
						suffix: 'Subject',
						types: {
							'^EventEmitter$': false,
						},
						variables: true,
					},
				],
				'rxjs/throw-error': 'error',
				'no-restricted-globals': [
					'error',
					{
						name: 'setInterval',
						message: 'Avoid using timers. Use `interval` from rxjs instead.',
					},
					{
						name: 'setTimeout',
						message: 'Avoid using timers. Use `timer` from rxjs instead.',
					},
				],
				'no-restricted-properties': [
					'error',
					{
						object: 'window',
						property: 'setInterval',
						message: 'Avoid using timers. Use `interval` from rxjs instead.',
					},
					{
						object: 'window',
						property: 'setTimeout',
						message: 'Avoid using timers. Use `timer` from rxjs instead.',
					},
				],
				'rxjs-angular/prefer-async-pipe': 'off',
				'rxjs-angular/prefer-takeuntil': [
					'error',
					{
						alias: ['untilDestroyed', 'takeUntilDestroyed'],
						checkComplete: true,
						checkDecorators: ['Component'],
						checkDestroy: false,
					},
				],
				'rxjs-angular/prefer-composition': 'off',
			},
		},
		{
			files: '*.json',
			parser: 'jsonc-eslint-parser',
		},
	],
};
